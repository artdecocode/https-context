{"version":3,"sources":["../src/index.js"],"names":["LOG","HTTPContext","constructor","called","_response","headers","state","postData","response","getState","setResponse","data","setHeaders","_init","server","handler","bind","connections","on","con","key","remoteAddress","remotePort","Promise","resolve","listen","undefined","address","url","port","_destroy","Object","keys","reduce","a","c","p","r","destroy","close","req","res","writeHead","contentType","method","catchment","Catchment","pipe","promise","end"],"mappings":"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","sourcesContent":["import { createServer } from 'http'\nimport { debuglog } from 'util'\nimport { Socket } from 'net' // eslint-disable-line no-unused-vars\nimport Catchment from 'catchment'\n\nconst LOG = debuglog('https-context')\n\nexport class HTTPContext {\n  /**\n   * @constructor\n   * A Zoroaster test context that sets up an HTTP server ready for connections.\n   * @param {Config} config Configuration object.\n   * @param {string} config.type The type.\n   * @example\n   *\n   * import { equal } from 'assert'\n   * import { HTTPContext } from 'https-context'\n   * import req from '../../src'\n   * import Context from '../context'\n   *\n   * const T = {\n   *  context: [Context, HTTPContext],\n   *  async 'make request'({ readFixture }, { url }) {\n   *   const expected = await readFixture()\n   *   const r = await req(url)\n   *   equal(expected, r)\n   *  },\n   * }\n   */\n  constructor() {\n    this.called = 0\n    this._response = 'OK'\n    this.headers = {}\n\n    this.state = {\n      called: 0,\n      headers: {},\n      postData: null,\n    }\n  }\n\n  get response() {\n    return this._response\n  }\n  getState() {\n    return this.state\n  }\n  setResponse(data) {\n    this._response = data\n  }\n  setHeaders(headers) {\n    this.headers = headers\n  }\n\n  async _init() {\n    const server = createServer(this.handler.bind(this))\n    this.server = server\n    /** @type {Object.<string, Socket>} */\n    this.connections = {}\n\n    this.server.on('connection', (con) => {\n      const key = con.remoteAddress + ':' + con.remotePort\n      this.connections[key] = con\n      con.on('close', () => {\n        delete this.connections[key]\n      })\n    })\n    await new Promise((resolve) => {\n      this.server.listen(undefined, 'localhost', resolve)\n    })\n    this.address = server.address()\n    // this._url = `http://${this.address.address}:${this.address.port}`\n  }\n  /** Returns address of the server\n   * @example\n   *\n   * `http://localhost:59292`\n   */\n  get url() {\n    if (!this.address) return null\n    return `http://${this.address.address}:${this.address.port}`\n  }\n  async _destroy() {\n    await new Promise(async (resolve) => {\n      await Object.keys(this.connections).reduce(async (a, key) => {\n        await a\n        const c = this.connections[key]\n        const p = new Promise((r) => {\n          c.on('close', () => {\n            LOG('socket closed')\n            r()\n          })\n        })\n        c.destroy()\n        await p\n      }, {})\n      this.server.close(resolve)\n      // this.server.on('close', resolve)\n    })\n  }\n  async handler(req, res) {\n    this.state.called += 1\n    this.state.headers = req.headers\n\n    res.writeHead(200, { 'Content-Type': this.contentType || 'text/plain', ...this.headers })\n\n    if (req.method != 'GET') {\n      const catchment = new Catchment\n      req.pipe(catchment)\n      const { promise } = catchment\n      const postData = await promise\n      this.state.postData = postData\n    }\n\n    res.end(this._response)\n  }\n}\n\n/**\n * @typedef {Object} Config\n * @property {string} type The type.\n */\n"],"file":"index.js"}