{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { createServer } from 'http'\nimport { debuglog } from 'util'\nconst { Socket } = require('net') // eslint-disable-line no-unused-vars\nimport Catchment from 'catchment'\n\nconst LOG = debuglog('https-context')\n\nexport class HTTPContext {\n  /**\n   * @constructor\n   * A Zoroaster test context that sets up an HTTP server ready for connections.\n   * @param {Config} config Configuration object.\n   * @param {string} config.type The type.\n   * @example\n   *\n   * import { equal } from 'assert'\n   * import { HTTPContext } from 'https-context'\n   * import req from '../../src'\n   * import Context from '../context'\n   *\n   * const T = {\n   *  context: [Context, HTTPContext],\n   *  async 'make request'({ readFixture }, { url }) {\n   *   const expected = await readFixture()\n   *   const r = await req(url)\n   *   equal(expected, r)\n   *  },\n   * }\n   */\n  constructor() {\n    this.called = 0\n    this._response = 'OK'\n    this.headers = {}\n\n    this.state = {\n      called: 0,\n      headers: {},\n      postData: null,\n    }\n  }\n\n  get response() {\n    return this._response\n  }\n  getState() {\n    return this.state\n  }\n  setResponse(data) {\n    this._response = data\n  }\n  setHeaders(headers) {\n    this.headers = headers\n  }\n  /**\n   * Set the content type for the response.\n   * @param {string} contentType The response content type.\n   */\n  setContentType(contentType) {\n    this.contentType = contentType\n  }\n  async _init() {\n    const server = createServer(this.handler.bind(this))\n    this.server = server\n    /** @type {Object.<string, Socket>} */\n    this.connections = {}\n\n    this.server.on('connection', (con) => {\n      const key = con.remoteAddress + ':' + con.remotePort\n      this.connections[key] = con\n      con.on('close', () => {\n        delete this.connections[key]\n      })\n    })\n    await new Promise((resolve) => {\n      this.server.listen(undefined, 'localhost', resolve)\n    })\n    this.address = server.address()\n  }\n  /** Returns address of the server\n   * @example\n   *\n   * `http://127.0.0.1:59292`\n   */\n  get url() {\n    if (!this.address) return null\n    return `http://${this.host}`\n  }\n  /** Returns host of the server\n   * @example\n   *\n   * `127.0.0.1:59292`\n   */\n  get host() {\n    if (!this.address) return null\n    return `${this.address.address}:${this.address.port}`\n  }\n  async _destroy() {\n    await new Promise(async (resolve) => {\n      await Object.keys(this.connections).reduce(async (a, key) => {\n        await a\n        const c = this.connections[key]\n        const p = new Promise((r) => {\n          c.on('close', () => {\n            LOG('socket closed')\n            r()\n          })\n        })\n        c.destroy()\n        await p\n      }, {})\n      this.server.close(resolve)\n      // this.server.on('close', resolve)\n    })\n  }\n  async handler(req, res) {\n    this.state.called += 1\n    this.state.headers = req.headers\n\n    res.writeHead(200, { 'Content-Type': this.contentType || 'text/plain', ...this.headers })\n\n    if (req.method != 'GET') {\n      const catchment = new Catchment\n      req.pipe(catchment)\n      const { promise } = catchment\n      const postData = await promise\n      this.state.postData = postData\n    }\n\n    res.end(this._response)\n  }\n}\n"]}